[project]
	# basic information, URLs down below because toml doesn't let you define the same table twice
	name = "myproject"
	version = "0.1.3"
	description = "template for python projects/packages"
	authors = [
		{ name = "Michael Ivanitskiy", email = "mivanits@umich.edu" }
	]
	readme = "README.md"
	requires-python = ">=3.11"

	# dependencies

	dependencies = [
		"numpy>=1.21.0",
		"torch>=2.0.0",
		"muutils>=0.7.0",
		"ipykernel>=6.29.5",
	]

[project.optional-dependencies]
	# handling torch
	torch-cu124 = [ "torch>=2.0.0" ]

	# for example purposes only
	cli = [
		"fire>=0.6.0",
	]

[dependency-groups]
	dev = [
		# test
		"pytest>=8.2.2",
		# coverage
		"pytest-cov>=4.1.0",
		"coverage-badge>=1.1.0",
		# type checking
		"mypy>=1.0.1",
		# docs
		'pdoc>=14.6.0',
		# lmcat -- a custom library. not exactly docs, but lets an LLM see all the code
		"lmcat>=0.2.0",
		# tomli since no tomlib in python < 3.11
		"tomli>=2.1.0; python_version < '3.11'",
	]
	lint = [
		# lint
		"pycln>=2.1.3",
		"ruff>=0.4.8",
	]


# more project metadata

[project.urls]

	Homepage = "https://miv.name/python-project-makefile-template"
	Documentation = "https://miv.name/python-project-makefile-template"
	Repository = "https://github.com/mivanit/python-project-makefile-template"
	Issues = "https://github.com/mivanit/python-project-makefile-template/issues"


# uv
[tool.uv]
	default-groups = ["dev", "lint"]

	[tool.uv.sources]
		torch = [ { index = "pytorch-cu124", extra = "torch-cu124" } ]

	[[tool.uv.index]]
	name = "pytorch-cu124"
	url = "https://download.pytorch.org/whl/cu124"
	explicit = true

[build-system]
	requires = ["hatchling"]
	build-backend = "hatchling.build"

# ruff config
[tool.ruff]
	exclude = ["__pycache__"]

	[tool.ruff.format]
		indent-style = "tab"
		skip-magic-trailing-comma = false

# `make lmcat` depends on the lmcat and can be configured here
[tool.lmcat]
	output = "docs/other/lmcat.txt" # changing this might mean it wont be accessible from the docs
	ignore_patterns = [
		"!docs/resources/make_docs.py",
		"docs/**",
		".venv/**",
		".git/**",
		".meta/**",
		"uv.lock",
		"LICENSE",
	]

# for configuring this tool (makefile, make_docs.py)
# ============================================================
[tool.makefile]

# documentation configuration, for `make docs` and `make docs-clean`
[tool.makefile.docs]
    # Output directory for generated documentation
    # MUST match DOCS_DIR in makefile
    output_dir = "docs"

    # List of files/directories in docs/ that should not be cleaned by `make docs-clean`
    # These paths are relative to output_dir
    no_clean = [
        ".nojekyll",  # For GitHub Pages
        # "resources/", # Templates, CSS, etc. this, or whatever is specified as DOCS_RESOURCES_DIR in makefile will always be preserved
    ]

    # Increment level of markdown headings in generated documentation
    # e.g. if 2, then h1 -> h3, h2 -> h4, etc.
    markdown_headings_increment = 2

    # Warnings to ignore during documentation generation
    warnings_ignore = [
        ".*No docstring.*",
        ".*Private member.*",
    ]

    # optional generation of notebooks as html pages
    [tool.makefile.docs.notebooks]
        # Enable notebook processing in documentation
		# disabled by default
        enabled = true
        
        # Source directory containing .ipynb files
        source_path = "notebooks"
        
        # Output path relative to docs directory [tool.makefile.docs.output_dir]
        output_path_relative = "notebooks"
        
        # Custom template for notebooks index page
        # Available variables: notebook_url, notebooks (list of dicts with ipynb, html, desc)
        # index_template = ...

        # Descriptions for notebooks, shown in index
        [tool.makefile.docs.notebooks.descriptions]
            "example" = "Example notebook showing basic usage"
            "advanced" = "Advanced usage patterns and techniques"
        
        

# Custom export configurations
# affects `make dep` and related commands
[tool.makefile.uv-exports]
	args = [
		"--no-hashes"
	]
	exports = [
		# no groups, no extras, just the base dependencies
		{ name = "base", groups = false, extras = false },
		# all groups
		{ name = "groups", groups = true, extras = false },
		# only the lint group -- custom options for this
		{ name = "lint", options = ["--only-group", "lint"] },
		# # all groups and extras
		{ name = "all", filename="requirements.txt", groups = true, extras=true },
		# # all groups and extras, a different way
		{ name = "all", groups = true, options = ["--all-extras"] },
	]

# configures `make todo`
[tool.makefile.inline-todo]
	# Directory to search for TODOs
	search_dir = "."
	
	# Output file location (relative to project root)
    # If changed, update docs references
	out_file = "docs/other/todo-inline.md"

	# Number of context lines to include around each TODO
	context_lines = 2

	# File extensions to search
	extensions = ["py", "md"]

	# Tags to look for
	tags = ["CRIT", "TODO", "FIXME", "HACK", "BUG", "DOC"]

	# Patterns to exclude from search
	exclude = [
		"docs/**",
		".venv/**",
		"scripts/get_todos.py",
	]
    
    # configuring the output
	# ------------------------------
	# branch to put in the url
	branch = "main"

	# repo url -- by default this will come from `[project.urls.{repository, github}]`
	# but you can override it here
	# repo_url = ...

    
	
	# template for the markdown output
	# this uses jinja2. see `TEMPLATE_MD` in makefile under `SCRIPT_GET_TODOS`
	# template_md = ...

	# this uses standard python string formatting
	# available variables: file, file_lang, line_num, code_url, context
	# template_issue = ...

	# this template has some custom syntax for adding the data directly to the html file. see that file for more info
	# template_html_source = "docs/resources/templates/todo-template.html"

    # Mapping of tags to GitHub issue labels
    [tool.makefile.inline-todo.tag_label_map]
        "BUG" = "bug"
        "TODO" = "enhancement"
		"DOC" = "documentation"

# ============================================================

